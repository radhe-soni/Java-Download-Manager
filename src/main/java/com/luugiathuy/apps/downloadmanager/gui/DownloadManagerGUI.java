/**
Copyright (c) 2011-present - Luu Gia Thuy

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
*/

package com.luugiathuy.apps.downloadmanager.gui;

import java.awt.Color;
import java.net.URL;
import java.util.Observable;
import java.util.Observer;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.plaf.metal.MetalLookAndFeel;
import javax.swing.plaf.metal.OceanTheme;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.ExitCodeGenerator;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.stereotype.Component;
import com.luugiathuy.apps.downloader.Downloader;
import com.luugiathuy.apps.downloadmanager.DownloadManager;
import com.luugiathuy.apps.downloadmanager.ProgressRenderer;
import com.luugiathuy.apps.service.DefaultDownloadItemsService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class DownloadManagerGUI extends javax.swing.JFrame implements Observer {

	private static final long serialVersionUID = 8489399426552541643L;

	@Autowired
	ConfigurableApplicationContext ctx;
	@Autowired
	private DownloadTableModel mTableModel;

	private Downloader mSelectedDownloader;

	@Autowired
	private DownloadManager downloadManager;
	@Autowired
	private ButtonComponents buttonComponents;
	@Autowired
	private DefaultDownloadItemsService defaultDownloadItemsService;
	private boolean mIsClearing;

	private void initialize() {
		// Set up table
		jtbDownload.getSelectionModel().addListSelectionListener(e -> tableSelectionChanged());

		// Allow only one row at a time to be selected.
		jtbDownload.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		// Set up ProgressBar as renderer for progress column.
		ProgressRenderer renderer = new ProgressRenderer(0, 100);
		renderer.setStringPainted(true); // show progress text
		jtbDownload.setDefaultRenderer(JProgressBar.class, renderer);

		// Set table's row height large enough to fit JProgressBar.
		jtbDownload.setRowHeight((int) renderer.getPreferredSize().getHeight());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		downloadableURL = new javax.swing.JTextField();
		jtxDownloadInfoFilePath = new javax.swing.JTextField();
		jScrollPane1 = new javax.swing.JScrollPane();
		jtbDownload = new javax.swing.JTable();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Download Manager");
		setResizable(false);

		initializeButtons();
		downloadInfoLabel = new javax.swing.JLabel();
		downloadInfoLabel.setText("Artifacts Info File");
		jtbDownload.setModel(mTableModel);
		jScrollPane1.setViewportView(jtbDownload);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		setHorizontalGroup(layout);

		buttonComponents.linkSize(layout);

		setVerticalGroup(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void setVerticalGroup(javax.swing.GroupLayout layout) {
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(createActingComponentsVertical(layout)));
	}

	private SequentialGroup createActingComponentsVertical(GroupLayout layout) {
		return layout.createSequentialGroup().addContainerGap().addGroup(createDownloadInfoPanelVertical(layout))
				.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(createAddNewDownloadVertical(layout))
				.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
				.addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				.addGroup(buttonComponents.createBottomButtonPanelVertical(layout)).addContainerGap();
	}

	private ParallelGroup createDownloadInfoPanelVertical(GroupLayout layout) {
		return layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				.addComponent(downloadInfoLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE,
						GroupLayout.PREFERRED_SIZE)
				.addComponent(jtxDownloadInfoFilePath, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
						GroupLayout.PREFERRED_SIZE)
				.addComponent(buttonComponents.jbnAddInfoFile);
	}

	private ParallelGroup createAddNewDownloadVertical(javax.swing.GroupLayout layout) {
		return layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				.addComponent(downloadableURL, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
				.addComponent(buttonComponents.jbnAdd);
	}

	private void setHorizontalGroup(javax.swing.GroupLayout layout) {
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout
				.createSequentialGroup().addContainerGap().addGroup(createActingComponents(layout)).addContainerGap()));
	}

	private ParallelGroup createActingComponents(javax.swing.GroupLayout layout) {
		return layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(buttonComponents.createBottomButtonPanel(layout))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
						.addComponent(downloadInfoLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addComponent(jtxDownloadInfoFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 654,
								Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(buttonComponents.jbnAddInfoFile))
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createAddNewDownloadHorizontal(layout))
				.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE);
	}

	private SequentialGroup createAddNewDownloadHorizontal(javax.swing.GroupLayout layout) {
		return layout.createSequentialGroup()
				.addComponent(downloadableURL, javax.swing.GroupLayout.DEFAULT_SIZE, 654, Short.MAX_VALUE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(buttonComponents.jbnAdd);
	}

	// Called when table row selection changes.
	private void tableSelectionChanged() {
		// unregister from receiving notifications from the last selected
		// download.
		if (mSelectedDownloader != null)
			mSelectedDownloader.deleteObserver(DownloadManagerGUI.this);

		// If not in the middle of clearing a download, set the selected
		// download and register to
		// receive notifications from it.
		if (!mIsClearing) {
			int index = jtbDownload.getSelectedRow();
			if (index != -1) {
				mSelectedDownloader = downloadManager.getDownload(jtbDownload.getSelectedRow());
				mSelectedDownloader.addObserver(DownloadManagerGUI.this);
			} else
				mSelectedDownloader = null;
			buttonComponents.updateButtons(mSelectedDownloader);
		}
	}

	@Override
	public void update(Observable o, Object arg) {
		// Update buttons if the selected download has changed.
		if (mSelectedDownloader != null && mSelectedDownloader.equals(o))
			buttonComponents.updateButtons(mSelectedDownloader);
	}

	private void initializeButtons() {
		buttonComponents.initAddButton(this::jbnAddActionPerformed);
		buttonComponents.initAddInfoFileButton(this::jbnAddInfoFileActionPerformed);
		buttonComponents.initStartButton(this::jbnStartActionPerformed);

		buttonComponents.initPauseButton(this::jbnPauseActionPerformed);

		buttonComponents.initRemoveButton(this::jbnRemoveActionPerformed);

		buttonComponents.initCancelButton(this::jbnCancelActionPerformed);

		buttonComponents.initExitButton(this::jbnExitActionPerformed);

		buttonComponents.initResumeButton(this::jbnResumeActionPerformed);
	}

	private void jbnStartActionPerformed(java.awt.event.ActionEvent evt) {
		mSelectedDownloader.download();
		buttonComponents.updateButtons(mSelectedDownloader);
	}

	/**
	 * Update buttons' state
	 */
	private void jbnPauseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnPauseActionPerformed
		mSelectedDownloader.pause();
		buttonComponents.updateButtons(mSelectedDownloader);
	}// GEN-LAST:event_jbnPauseActionPerformed

	private void jbnResumeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnResumeActionPerformed
		mSelectedDownloader.resume();
		buttonComponents.updateButtons(mSelectedDownloader);
	}// GEN-LAST:event_jbnResumeActionPerformed

	private void jbnCancelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnCancelActionPerformed
		mSelectedDownloader.cancel();
		buttonComponents.updateButtons(mSelectedDownloader);
	}// GEN-LAST:event_jbnCancelActionPerformed

	private void jbnRemoveActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnRemoveActionPerformed
		mIsClearing = true;
		int index = jtbDownload.getSelectedRow();
		downloadManager.removeDownload(index);
		mTableModel.clearDownload(index);
		mIsClearing = false;
		mSelectedDownloader = null;
		buttonComponents.updateButtons(mSelectedDownloader);
	}// GEN-LAST:event_jbnRemoveActionPerformed

	private void jbnExitActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnExitActionPerformed
		setVisible(false);
		int exitCode = SpringApplication.exit(ctx, () -> 0);
		System.exit(exitCode);
	}// GEN-LAST:event_jbnExitActionPerformed

	private void jbnAddActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnAddActionPerformed
		URL verifiedUrl = DownloadManager.verifyFileURL(downloadableURL.getText());
		if (verifiedUrl != null) {
			Downloader download = downloadManager.createDownload(verifiedUrl, DownloadManager.DEFAULT_OUTPUT_FOLDER);
			mTableModel.addNewDownload(download);
			downloadableURL.setText(""); // reset add text field
		} else {
			JOptionPane.showMessageDialog(this, "Invalid Download URL", "Error", JOptionPane.ERROR_MESSAGE);
		}
	}// GEN-LAST:event_jbnAddActionPerformed

	private void jbnAddInfoFileActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jbnAddActionPerformed
		String downloadInfoJsonFile = jtxDownloadInfoFilePath.getText();
		try {
			Stream<Downloader> downloaders = defaultDownloadItemsService.getDownloaders(downloadInfoJsonFile);
			downloaders.forEach(mTableModel::addNewDownload);
		} catch (RuntimeException re) {//
			log.error("Error creating download list from download info file", re);
			JOptionPane.showMessageDialog(this, "Error creating download list from download info file", "Error",
					JOptionPane.ERROR_MESSAGE);
		}
	}

	@PostConstruct
	public void postConstruct() {
		try {
			UIManager.setLookAndFeel(new MetalLookAndFeel());
			MetalLookAndFeel.setCurrentTheme(new OceanTheme());
			UIManager.put("ProgressBar.background", Color.ORANGE);
			UIManager.put("ProgressBar.foreground", Color.BLUE);
			UIManager.put("ProgressBar.selectionBackground", Color.RED);
			UIManager.put("ProgressBar.selectionForeground", Color.GREEN);
			UIManager.put("Label.background", Color.ORANGE);
		} catch (Exception e) {
			log.error("look and feel could not intiated", e);
		}

		java.awt.EventQueue.invokeLater(() -> {
			this.setVisible(true);
			initComponents();
			initialize();
		});

	}

	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable jtbDownload;
	private javax.swing.JTextField downloadableURL;
	private javax.swing.JTextField jtxDownloadInfoFilePath;
	private javax.swing.JLabel downloadInfoLabel;
}
